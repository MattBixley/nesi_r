p <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
xkcd() +
labs(title = "XKCD-Style Scatter Plot",
x = "X-axis",
y = "Y-axis")
library(xkcdstyle)
p <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
theme_xkcd() +
labs(title = "XKCD-Style Scatter Plot",
x = "X-axis",
y = "Y-axis")
p
vignette("xkcd-intro")
library(extrafont)
p <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
theme_xkcd() +
labs(title = "XKCD-Style Scatter Plot",
x = "X-axis",
y = "Y-axis")
library(extrafont)
library(ggplot2)
if( 'xkcd' %in% fonts()) {
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
} else {
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
download.file("http://simonsoftware.se/other/xkcd.ttf",
+ dest="xkcd.ttf", mode="wb")
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("mkdir ~/Code/.fonts")
getwd()
system("mkdir C:/Users/mattb/Code/.fonts")
system("cp xkcd.ttf C:/Users/mattb/Code/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="/Code/xkcd.ttf", mode="wb")
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="Code/xkcd.ttf", mode="wb")
download.file("http://simonsoftware.se/other/xkcd.ttf", dest="C:/Users/mattb/Code/.fonts/xkcd.ttf", mode="wb")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
p <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
theme_xkcd() +
labs(title = "XKCD-Style Scatter Plot",
x = "X-axis",
y = "Y-axis")
p
p <- ggplot(data, aes(x = x, y = y)) +
geom_line() +
theme_xkcd() +
labs(title = "XKCD-Style Scatter Plot",
x = "X-axis",
y = "Y-axis")
p
library(extrafont)
library(ggplot2)
if( 'xkcd' %in% fonts()) {
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
} else {
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
p <- ggplot() + geom_line(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
if( 'xkcd' %in% fonts()) {
p <- ggplot() + geom_line(aes(x=mpg, y=wt), data=mtcars) +
theme(text = element_text(size = 16, family = "xkcd"))
} else {
warning("Not xkcd fonts installed!")
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
}
p
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
xkcdaxis(xrange,yrange)
p
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
theme_xkcd()
p
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
xkcdaxis(xrange,yrange)
p
### Set up the trial dataset
data <- NULL
data$x <- seq(1, 10, 0.1)
data$y1 <- sin(data$x)
data$y2 <- cos(data$x)
data$xaxis <- -1.5
data <- as.data.frame(data)
### Plot the chart
p <- ggplot(data=data, aes(x=x, y=y1))+
geom_line(aes(y=y2), position="jitter")+
geom_line(colour="white", size=3, position="jitter")+
geom_line(colour="red", size=1, position="jitter")+
geom_text(family="Humor Sans", x=6, y=-1.2, label="A SIN AND COS CURVE")+
geom_line(aes(y=xaxis), position = position_jitter(h = 0.005), colour="black")+
scale_x_continuous(breaks=c(2, 5, 6, 9),
labels = c("YARD", "STEPS", "DOOR", "INSIDE"))+labs(x="", y="")+
theme_xkcd
p
### XKCD theme
theme_xkcd <- theme(
panel.background = element_rect(fill="white"),
axis.ticks = element_line(colour=NA),
panel.grid = element_line(colour="white"),
axis.text.y = element_text(colour=NA),
axis.text.x = element_text(colour="black"),
text = element_text(size=16, family="Humor Sans")
)
### Plot the chart
p <- ggplot(data=data, aes(x=x, y=y1))+
geom_line(aes(y=y2), position="jitter")+
geom_line(colour="white", size=3, position="jitter")+
geom_line(colour="red", size=1, position="jitter")+
geom_text(family="Humor Sans", x=6, y=-1.2, label="A SIN AND COS CURVE")+
geom_line(aes(y=xaxis), position = position_jitter(h = 0.005), colour="black")+
scale_x_continuous(breaks=c(2, 5, 6, 9),
labels = c("YARD", "STEPS", "DOOR", "INSIDE"))+labs(x="", y="")+
theme_xkcd
p
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
theme_xkcd()
p
xrange <- range(mtcars$mpg)
yrange <- range(mtcars$wt)
set.seed(123) # for reproducibility
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
xkcdaxis(xrange,yrange)
p
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
theme_xkcd()
p
p <- ggplot() + geom_point(aes(mpg, wt), data=mtcars) +
xkcdaxis(xrange,yrange) +
theme_xkcd()
p
pkgs <-
c("bonsai", "doParallel", "embed", "finetune", "lightgbm", "lme4",
"plumber", "probably", "ranger", "rpart", "rpart.plot", "rules",
"splines2", "stacks", "text2vec", "textrecipes", "tidymodels",
"vetiver", "remotes")
install.packages(pkgs)
.libPaths()
install.packages('qtwAcademic')
library(quarto)
install.packages("quarto")
library(quarto)
quarto_version()
ss <- readClipboard()
ss
ss <- readClipboard(sep = "\t")
ss <- readClipboard(raw=T)
ss
library(tidyverse)
ss <- read_csv("ss.csv")
ss
table(ss)
table(ss$Roll)
barplot(ss$Roll)
barplot(table(ss$Roll))
barplot(prop(table(ss$Roll)))
barplot(prop.table(ss$Roll))
prop.table(ss$Roll)
prop.table(table(ss$Roll))
round(prop.table(table(ss$Roll)),1)
round(prop.table(table(ss$Roll)),2)
dim(ss)
table(ss)
library(readxl)
#library(tidyverse)
library(magrittr)
library(tidyr)
library(dplyr)
library(tibble)
library(phyloseq)
library(ape)
install.packages("BiocManager")
BiocManager::install(phyloseq)
BiocManager::install("phyloseq")
suppressPackageStartupMessages({
library(MicrobiotaProcess) # an R package for analysis, visualization and biomarker discovery of Microbiome.
library(phyloseq) # Handling and analysis of high-throughput microbiome census data.
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics.
library(tidyverse) # Easily Install and Load the 'Tidyverse'.
library(vegan) # Community Ecology Package.
library(coin) # Conditional Inference Procedures in a Permutation Test Framework.
library(reshape2) # Flexibly Reshape Data: A Reboot of the Reshape Package.
library(ggnewscale) # Multiple Fill and Colour Scales in 'ggplot2'.
})
BiocManager::install("MicrobiotaProcess")
suppressPackageStartupMessages({
library(MicrobiotaProcess) # an R package for analysis, visualization and biomarker discovery of Microbiome.
library(phyloseq) # Handling and analysis of high-throughput microbiome census data.
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics.
library(tidyverse) # Easily Install and Load the 'Tidyverse'.
library(vegan) # Community Ecology Package.
library(coin) # Conditional Inference Procedures in a Permutation Test Framework.
library(reshape2) # Flexibly Reshape Data: A Reboot of the Reshape Package.
library(ggnewscale) # Multiple Fill and Colour Scales in 'ggplot2'.
})
otuda <- read.table("./IBD_data/ibd_asv_table.txt", header=T,
check.names=F, comment.char="", row.names=1, sep="\t")
getwd()
otuda <- read.table("IBD_data/ibd_asv_table.txt", header=T,
check.names=F, comment.char="", row.names=1, sep="\t")
getwd()
ls()
list.files()
list.files("ibd_data/")
otuda <- read.table("./ibd_data/ibd_asv_table.txt", header=T,
check.names=F, comment.char="", row.names=1, sep="\t")
# building the output format of removeBimeraDenovo of dada2
otuda <- data.frame(t(otuda), check.names=F)
sampleda <- read.csv("./ibd_data/ibd_meta.csv", row.names=1, comment.char="")
taxda <- read.table("./ibd_data/ibd_taxa.txt", header=T,
row.names=1, check.names=F, comment.char="")
# the feature names should be the same with rownames of taxda.
taxda <- taxda[match(colnames(otuda), rownames(taxda)),]
psraw <- import_dada2(seqtab=otuda, taxatab=taxda, sampleda=sampleda)
# samples were removed, which the reads number is too little.
psraw <- prune_samples(sample_sums(psraw)>=sort(rowSums(otu_table(psraw)))[3], psraw)
# then the samples were rarefied to 20914 reads.
set.seed(1024)
ps <- rarefy_even_depth(psraw)
ps
dim(ps)
# Since the effect size was calculated by randomly re-sampling,
# the seed should be set for reproducibly results.
set.seed(1024)
deres <- diff_analysis(obj = ps, classgroup = "Group",
mlfun = "lda",
filtermod = "pvalue",
firstcomfun = "kruskal_test",
firstalpha = 0.05,
strictmod = TRUE,
secondcomfun = "wilcox_test",
subclmin = 3,
subclwilc = TRUE,
secondalpha = 0.01,
lda=3)
ps2 <- phyloseq(otu_table(otuda, taxa_are_rows=FALSE), sample_data(sampleda), tax_table(as.matrix(taxda)))
ps2
deres <- diff_analysis(obj = ps2, classgroup = "Group",
mlfun = "lda",
filtermod = "pvalue",
firstcomfun = "kruskal_test",
firstalpha = 0.05,
strictmod = TRUE,
secondcomfun = "wilcox_test",
subclmin = 3,
subclwilc = TRUE,
secondalpha = 0.01,
lda=3)
classtaxa <- get_taxadf(obj=ps, taxlevel=3)
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`).
pclass <- ggbartax(obj=classtaxa, facetNames="Group") +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
pclass
classtaxa
pcares <- get_pca(obj=ps, method="hellinger")
pcares
ps
otu_table()
str(ps)
names(ps)
str(ps)
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`).
pclass <- ggbartax(obj=classtaxa, facetNames="group") +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
pclass
deres <- diff_analysis(obj = ps, classgroup = "group",
mlfun = "lda",
filtermod = "pvalue",
firstcomfun = "kruskal_test",
firstalpha = 0.05,
strictmod = TRUE,
secondcomfun = "wilcox_test",
subclmin = 3,
subclwilc = TRUE,
secondalpha = 0.01,
lda=3)
str(ps)
deres <- diff_analysis(obj = ps, classgroup = "NAMES",
mlfun = "lda",
filtermod = "pvalue",
firstcomfun = "kruskal_test",
firstalpha = 0.05,
strictmod = TRUE,
secondcomfun = "wilcox_test",
subclmin = 3,
subclwilc = TRUE,
secondalpha = 0.01,
lda=3)
head(ps)
deres <- diff_analysis(obj = ps, classgroup = "Class",
mlfun = "lda",
filtermod = "pvalue",
firstcomfun = "kruskal_test",
firstalpha = 0.05,
strictmod = TRUE,
secondcomfun = "wilcox_test",
subclmin = 3,
subclwilc = TRUE,
secondalpha = 0.01,
lda=3)
deres
head(deres)
diffclade_p <- ggdiffclade(
obj=deres,
alpha=0.3,
linewd=0.15,
skpointsize=0.6,
layout="radial",
taxlevel=3,
removeUnkown=TRUE,
reduce=TRUE # This argument is to remove the branch of unknown taxonomy.
) +
scale_fill_manual(
values=c("#00AED7", "#FD9347")
) +
guides(color = guide_legend(
keywidth = 0.1,
keyheight = 0.6,
order = 3,
ncol=1)
) +
theme(
panel.background=element_rect(fill=NA),
legend.position="right",
plot.margin=margin(0,0,0,0),
legend.spacing.y=unit(0.02, "cm"),
legend.title=element_text(size=7),
legend.text=element_text(size=6),
legend.box.spacing=unit(0.02,"cm")
)
diffclade_p
str(ps)
str(deres)
a <- 1
library(installr)
updateR()
updateR()
sessionInfo()
set.seed(1)
library(sp)
library(INLA)
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
set.seed(1)
library(sp)
library(INLA)
library(inlabru)
n = 100; a = 1; b = 1; tau = 100
z = rnorm(n)
eta = a + b*z
scale = exp(rnorm(n))
prec = scale*tau
y = rnorm(n, mean = eta, sd = 1/sqrt(prec))
data = list(y=y, z=z)
formula = y ~ 1+z
result = inla(formula, family = "gaussian", data = data)
result
x <- "MC079-17-BB-C-1-053_22KKVWLT3_CCGGTTCCTA-TATATTCGAG_L007_R1.fastq"
library(tidyverse)
library(tidyverse)
strsplit(x, "_")
strsplit(x, "_")[3]
strsplit(x, "_")[[]][3]
strsplit(x, "_")[[1]][3]
y <- strsplit(x, "_")[[1]][3]
strsplit(y, "-")
x <- "MC079-17-BB-C-1-053_22KKVWLT3_CCGGTTCCTA-TATATTCGAG_L007_R1.fastq"
library(tidyverse)
y <- strsplit(x, "_")[[1]][3]
i5 <- strsplit(y, "-")[[1]][1]
i7 <- strsplit(y, "-")[[1]][2]
i5
i5i7
i7
N <- 5000; S <- 500; BI = 0
pll <- numeric(S); hll <- numeric(S)
library(stelfi)
install.packages("stelfi")
library(stelfi)
N <- 5000; S <- 500; BI = 0
pll <- numeric(S); hll <- numeric(S)
for(i in 1:S){
times = stelfi::sim_hawkes(1,0,1,n=N,method=2, seed = i)
hll[i] <- 10000
for(j in 1:20){
obj = stelfi::fit_hawkes(times, parameters = list(mu = runif(1) * N / max(times)))$objective
if (obj < hll[i]){
hll[i] = obj
}
}
DT = max(times)
pll[i] = (N -BI) - (N-BI)*log((N-BI)/DT)
print:info:
}
for(i in 1:S){
times = stelfi::sim_hawkes(1,0,1,n=N,method=2, seed = i)
hll[i] <- 10000
for(j in 1:20){
obj = stelfi::fit_hawkes(times, parameters = list(mu = runif(1) * N / max(times)))$objective
if (obj < hll[i]){
hll[i] = obj
}
}
DT = max(times)
pll[i] = (N -BI) - (N-BI)*log((N-BI)/DT)
}
install.packages("vctrs")
for(i in 1:S){
times = stelfi::sim_hawkes(1,0,1,n=N,method=2, seed = i)
hll[i] <- 10000
for(j in 1:20){
obj = stelfi::fit_hawkes(times, parameters = list(mu = runif(1) * N / max(times)))$objective
if (obj < hll[i]){
hll[i] = obj
}
}
DT = max(times)
pll[i] = (N -BI) - (N-BI)*log((N-BI)/DT)
}
library(stelfi)
N <- 50; S <- 5; BI = 0
pll <- numeric(S); hll <- numeric(S)
for(i in 1:S){
times = stelfi::sim_hawkes(1,0,1,n=N,method=2, seed = i)
hll[i] <- 10000
for(j in 1:20){
obj = stelfi::fit_hawkes(times, parameters = list(mu = runif(1) * N / max(times)))$objective
if (obj < hll[i]){
hll[i] = obj
}
}
DT = max(times)
pll[i] = (N -BI) - (N-BI)*log((N-BI)/DT)
}
pll
shiny::runApp('~/test')
install.packages("gm")
library(gm)
pitches <- as.list(c(64, 65, 69, 71, 72, 76))
durations <- rep(list(1), length(pitches))
m <- Music() + Meter(4, 4) + Tempo(120)
for (i in 0:8) {
m <- m + Line(pitches, durations, offset = 0.5 * i)
}
show(m, to = c("score", "audio"))
m
# geospatial work with terra
library(terra)
# Create a SpatRaster 'a' with values
a <- rast(ncols = 40, nrows = 40, xmin = -110, xmax = -90, ymin = 40, ymax = 60, crs = "+proj=longlat +datum=WGS84")
values(a) <- 1:ncell(a)
# Define a new CRS for 'b'
newcrs <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +datum=WGS84"
# Create a new SpatRaster 'b' by projecting 'a'
b <- rast(ncols = 94, nrows = 124, xmin = -944881, xmax = 935118, ymin = 4664377, ymax = 7144377, crs = newcrs)
w <- project(a, b)
plot(w)
# what libraries is R seeing
.libPaths()
# Presence of Biomanager implies other packages and code will work
BiocManager::version()
# load libraries
#library(DESeq2)
library(dplyr)
# read data
fcData <- read.table('data/yeast_counts_all_chr.txt', sep='\t', header=TRUE)
setwd("C:/Users/mattb/Code/nesi_r")
# read data
fcData <- read.table('data/yeast_counts_all_chr.txt', sep='\t', header=TRUE)
names(fcData)[7:12] = c("WT1", "WT2", "WT3", "MT1", "MT2", "MT3")
fcData |> head()
# basic summary
counts <- fcData[, 7:12]
rownames(counts) = fcData$Geneid
counts |> head()
# Expression Analysis
library(limma)
library(edgeR)
# Expression Analysis
library(limma)
BiocManager::install("limma")
